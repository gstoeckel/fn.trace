* fn.trace is an extension of clojure.contrib.trace
It adds the ability to trace functions in a multithreaded app (by
sending the trace output of each thread to a separate file), and to
report exceptions that were thrown.

** To add to your project.clj
#+BEGIN_EXAMPLE
 [fn.trace "1.3.2.0-SNAPSHOT"]
#+END_EXAMPLE

* Usage
You can trace single functions or entire namespaces (all public fns in
that namespace).  
#+BEGIN_EXAMPLE
(use 'fn.trace)
(dotrace-all [my.ns1 
              my.ns2 
              my.other.ns1/fn1]}
  (my.ns1/fn1 arg1 arg2)
  (my.ns2/fn5 blah blah blah)
  (comment "etc, etc"))
#+END_EXAMPLE

You can also exclude fns from a traced namespace as follows: 
#+BEGIN_EXAMPLE
(use 'fn.trace)
(dotrace (remove #{'my.ns1/verbose-fn1 'my.ns2/other-unwanted-fn1} 
                 (all-fns [my.ns1 
                           my.ns2 
                           my.other.ns1/fn1]}
  (my.ns1/fn1 arg1 arg2)
  (my.ns2/fn5 blah blah blah)
  (comment "etc, etc"))
#+END_EXAMPLE

Trace multithreaded:
#+BEGIN_EXAMPLE
(use 'fn.trace)
;;this code should be located somewhere where each thread you want to
;;trace will hit it
(binding [tracer (per-thread-tracer)] 
 (dotrace (remove ['my.ns1/verbose-fn1 'my.ns2/other-unwanted-fn1] 
                  (all-fns [my.ns1 
                            my.ns2 
                            my.other.ns1/fn1]}
   (my.ns1/fn1 arg1 arg2)
   (my.ns2/fn5 blah blah blah)
   (comment "etc, etc")))
#+END_EXAMPLE
